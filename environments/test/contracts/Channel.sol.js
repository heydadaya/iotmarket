// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":true,"inputs":[{"name":"channel","type":"bytes32"}],"name":"isValidChannel","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":false,"inputs":[],"name":"createChannel","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"channel","type":"bytes32"},{"name":"recipient","type":"address"},{"name":"value","type":"uint256"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"name":"verify","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":false,"inputs":[{"name":"channel","type":"bytes32"},{"name":"recipient","type":"address"},{"name":"value","type":"uint256"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"}],"name":"claim","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"channels","outputs":[{"name":"owner","type":"address"},{"name":"value","type":"uint256"},{"name":"validUntil","type":"uint256"},{"name":"valid","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"channel","type":"bytes32"}],"name":"getChannelValidUntil","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"channel","type":"bytes32"}],"name":"reclaim","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"channel","type":"bytes32"},{"name":"recipient","type":"address"},{"name":"value","type":"uint256"}],"name":"getHash","outputs":[{"name":"","type":"bytes32"}],"type":"function"},{"constant":true,"inputs":[{"name":"channel","type":"bytes32"}],"name":"getChannelOwner","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"channel","type":"bytes32"}],"name":"deposit","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"channel","type":"bytes32"}],"name":"getChannelValue","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"inputs":[],"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":false,"name":"channel","type":"bytes32"}],"name":"NewChannel","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"channel","type":"bytes32"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"who","type":"address"},{"indexed":true,"name":"channel","type":"bytes32"}],"name":"Claim","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"channel","type":"bytes32"}],"name":"Reclaim","type":"event"}],
    binary: "606060405260006001556105a4806100176000396000f36060604052361561008d5760e060020a60003504631336e01f811461008f578063423d4ef2146100c45780634754d5901461019357806360a9c9c2146101e35780637a7ebd7b146102085780638a1aaa751461024057806396afb3651461025e578063a99a8ae8146102fd578063aba60a7014610343578063b214faa514610366578063d05121cc14610377575b005b6103946004355b6000818152602081905260408120600381015460ff1680156100bd57506002810154429010155b9392505050565b600180548082018255604080519182528051918290036020908101832060808401835233808552348584019081526201518042018686019081526060870188815260008581528087528790209751885473ffffffffffffffffffffffffffffffffffffffff1916178855915197870197909755955160028601559451600394909401805460ff19169094179093558151838152915161008d94600160a060020a0316927fc7c404c722591d11a1549e126a0300ed03d67efb5612946694ac1ec282da3db292908290030190a250565b61039460043560243560443560643560843560a4355b6000868152602081905260408120600381015460ff1680156101cf575060028101544290115b801561045d5750600161040a89898961030a565b61008d60043560243560443560643560843560a43560006104eb8787878787876101a9565b6000602081905260043581526040902060038101546001820154600283015492546103a893600160a060020a03919091169260ff1684565b6103db6004356000818152602081905260409020600201545b919050565b61008d6004356000818152602081905260408120600181015490919011801561028b575060028101544290105b156102f95780546001820154604051600160a060020a0392909216916000919082818181858883f1505050838152602081905260408120805473ffffffffffffffffffffffffffffffffffffffff19168155600181018290556002810191909155600301805460ff19169055505b5050565b6103db6004356024356044355b60408051938452600160a060020a03929092166c0100000000000000000000000002602084015260348301525190819003605401902090565b6103ed600435600081815260208190526040902054600160a060020a0316610259565b61008d600435600061054782610096565b6103db600435600081815260208190526040902060010154610259565b604080519115158252519081900360200190f35b60408051600160a060020a0395909516855260208501939093528383019190915215156060830152519081900360800190f35b60408051918252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b6040805191825260ff881660208381019190915282820188905260608301879052905160808381019382900301816000866161da5a03f115610002575050604051518154600160a060020a039081169116145b98975050505050505050565b604051600160a060020a03871690600090879082818181858883f1505050506001820180548790039055505b600087815260208190526040808220600301805460ff19169055518891600160a060020a038916917f89c904d8eb3603c6be0211db9f01e7df9fa900f68b5baf90b86756406d7d81829190a35b50505050505050565b15156104f6576104e2565b5060008681526020819052604090206001810154851115610469576001810154604051600160a060020a0388169160009182818181858883f193505050505060008160010160005081905550610495565b151561055257610002565b5060008181526020819052604080822060018101805434019055905190918391600160a060020a033316917f678afb2e81183654e6389bac063af1933c7935f97aceeae5aaa51bc54662cf8891a3505056",
    unlinked_binary: "606060405260006001556105a4806100176000396000f36060604052361561008d5760e060020a60003504631336e01f811461008f578063423d4ef2146100c45780634754d5901461019357806360a9c9c2146101e35780637a7ebd7b146102085780638a1aaa751461024057806396afb3651461025e578063a99a8ae8146102fd578063aba60a7014610343578063b214faa514610366578063d05121cc14610377575b005b6103946004355b6000818152602081905260408120600381015460ff1680156100bd57506002810154429010155b9392505050565b600180548082018255604080519182528051918290036020908101832060808401835233808552348584019081526201518042018686019081526060870188815260008581528087528790209751885473ffffffffffffffffffffffffffffffffffffffff1916178855915197870197909755955160028601559451600394909401805460ff19169094179093558151838152915161008d94600160a060020a0316927fc7c404c722591d11a1549e126a0300ed03d67efb5612946694ac1ec282da3db292908290030190a250565b61039460043560243560443560643560843560a4355b6000868152602081905260408120600381015460ff1680156101cf575060028101544290115b801561045d5750600161040a89898961030a565b61008d60043560243560443560643560843560a43560006104eb8787878787876101a9565b6000602081905260043581526040902060038101546001820154600283015492546103a893600160a060020a03919091169260ff1684565b6103db6004356000818152602081905260409020600201545b919050565b61008d6004356000818152602081905260408120600181015490919011801561028b575060028101544290105b156102f95780546001820154604051600160a060020a0392909216916000919082818181858883f1505050838152602081905260408120805473ffffffffffffffffffffffffffffffffffffffff19168155600181018290556002810191909155600301805460ff19169055505b5050565b6103db6004356024356044355b60408051938452600160a060020a03929092166c0100000000000000000000000002602084015260348301525190819003605401902090565b6103ed600435600081815260208190526040902054600160a060020a0316610259565b61008d600435600061054782610096565b6103db600435600081815260208190526040902060010154610259565b604080519115158252519081900360200190f35b60408051600160a060020a0395909516855260208501939093528383019190915215156060830152519081900360800190f35b60408051918252519081900360200190f35b60408051600160a060020a03929092168252519081900360200190f35b6040805191825260ff881660208381019190915282820188905260608301879052905160808381019382900301816000866161da5a03f115610002575050604051518154600160a060020a039081169116145b98975050505050505050565b604051600160a060020a03871690600090879082818181858883f1505050506001820180548790039055505b600087815260208190526040808220600301805460ff19169055518891600160a060020a038916917f89c904d8eb3603c6be0211db9f01e7df9fa900f68b5baf90b86756406d7d81829190a35b50505050505050565b15156104f6576104e2565b5060008681526020819052604090206001810154851115610469576001810154604051600160a060020a0388169160009182818181858883f193505050505060008160010160005081905550610495565b151561055257610002565b5060008181526020819052604080822060018101805434019055905190918391600160a060020a033316917f678afb2e81183654e6389bac063af1933c7935f97aceeae5aaa51bc54662cf8891a3505056",
    address: "0xad319abb330b4412d176e84955603b8eefba8b25",
    generated_with: "2.0.9",
    contract_name: "Channel"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("Channel error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("Channel error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("Channel error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("Channel error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.Channel = Contract;
  }

})();
